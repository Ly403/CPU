library verilog;
use verilog.vl_types.all;
entity CU is
    generic(
        Add             : vl_logic_vector(0 to 4) := (Hi0, Hi0, Hi0, Hi0, Hi0);
        Addu            : vl_logic_vector(0 to 4) := (Hi0, Hi0, Hi0, Hi0, Hi1);
        Sub             : vl_logic_vector(0 to 4) := (Hi0, Hi0, Hi0, Hi1, Hi0);
        Subu            : vl_logic_vector(0 to 4) := (Hi0, Hi0, Hi0, Hi1, Hi1);
        \And\           : vl_logic_vector(0 to 4) := (Hi0, Hi0, Hi1, Hi0, Hi0);
        \Or\            : vl_logic_vector(0 to 4) := (Hi0, Hi0, Hi1, Hi0, Hi1);
        \Xor\           : vl_logic_vector(0 to 4) := (Hi0, Hi0, Hi1, Hi1, Hi0);
        \Nor\           : vl_logic_vector(0 to 4) := (Hi0, Hi0, Hi1, Hi1, Hi1);
        Slt             : vl_logic_vector(0 to 4) := (Hi0, Hi1, Hi0, Hi0, Hi0);
        Sltu            : vl_logic_vector(0 to 4) := (Hi0, Hi1, Hi0, Hi0, Hi1);
        \Sll\           : vl_logic_vector(0 to 4) := (Hi0, Hi1, Hi0, Hi1, Hi0);
        \Srl\           : vl_logic_vector(0 to 4) := (Hi0, Hi1, Hi0, Hi1, Hi1);
        \Sra\           : vl_logic_vector(0 to 4) := (Hi0, Hi1, Hi1, Hi0, Hi0);
        Sllv            : vl_logic_vector(0 to 4) := (Hi0, Hi1, Hi1, Hi0, Hi1);
        Srlv            : vl_logic_vector(0 to 4) := (Hi0, Hi1, Hi1, Hi1, Hi0);
        Srav            : vl_logic_vector(0 to 4) := (Hi0, Hi1, Hi1, Hi1, Hi1);
        Jr              : vl_logic_vector(0 to 4) := (Hi1, Hi0, Hi0, Hi0, Hi0);
        Addi            : vl_logic_vector(0 to 4) := (Hi1, Hi0, Hi0, Hi0, Hi1);
        Addiu           : vl_logic_vector(0 to 4) := (Hi1, Hi0, Hi0, Hi1, Hi0);
        Andi            : vl_logic_vector(0 to 4) := (Hi1, Hi0, Hi0, Hi1, Hi1);
        Ori             : vl_logic_vector(0 to 4) := (Hi1, Hi0, Hi1, Hi0, Hi0);
        Xori            : vl_logic_vector(0 to 4) := (Hi1, Hi0, Hi1, Hi0, Hi1);
        Lw              : vl_logic_vector(0 to 4) := (Hi1, Hi0, Hi1, Hi1, Hi0);
        Sw              : vl_logic_vector(0 to 4) := (Hi1, Hi0, Hi1, Hi1, Hi1);
        Beq             : vl_logic_vector(0 to 4) := (Hi1, Hi1, Hi0, Hi0, Hi0);
        Bne             : vl_logic_vector(0 to 4) := (Hi1, Hi1, Hi0, Hi0, Hi1);
        Slti            : vl_logic_vector(0 to 4) := (Hi1, Hi1, Hi0, Hi1, Hi0);
        Sltiu           : vl_logic_vector(0 to 4) := (Hi1, Hi1, Hi0, Hi1, Hi1);
        Lui             : vl_logic_vector(0 to 4) := (Hi1, Hi1, Hi1, Hi0, Hi0);
        J               : vl_logic_vector(0 to 4) := (Hi1, Hi1, Hi1, Hi0, Hi1);
        Jal             : vl_logic_vector(0 to 4) := (Hi1, Hi1, Hi1, Hi1, Hi0)
    );
    port(
        clk             : in     vl_logic;
        z               : in     vl_logic;
        instruction     : in     vl_logic_vector(31 downto 0);
        PC_CLK          : out    vl_logic;
        IM_R            : out    vl_logic;
        M1              : out    vl_logic;
        M2              : out    vl_logic;
        M3              : out    vl_logic;
        M4              : out    vl_logic;
        M5              : out    vl_logic;
        M6              : out    vl_logic;
        M7              : out    vl_logic;
        M8              : out    vl_logic;
        M9              : out    vl_logic;
        aluc            : out    vl_logic_vector(3 downto 0);
        rfw             : out    vl_logic;
        rfclk           : out    vl_logic;
        dmw             : out    vl_logic;
        dmr             : out    vl_logic;
        dm_cs           : out    vl_logic;
        EXT16           : out    vl_logic
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of Add : constant is 1;
    attribute mti_svvh_generic_type of Addu : constant is 1;
    attribute mti_svvh_generic_type of Sub : constant is 1;
    attribute mti_svvh_generic_type of Subu : constant is 1;
    attribute mti_svvh_generic_type of \And\ : constant is 1;
    attribute mti_svvh_generic_type of \Or\ : constant is 1;
    attribute mti_svvh_generic_type of \Xor\ : constant is 1;
    attribute mti_svvh_generic_type of \Nor\ : constant is 1;
    attribute mti_svvh_generic_type of Slt : constant is 1;
    attribute mti_svvh_generic_type of Sltu : constant is 1;
    attribute mti_svvh_generic_type of \Sll\ : constant is 1;
    attribute mti_svvh_generic_type of \Srl\ : constant is 1;
    attribute mti_svvh_generic_type of \Sra\ : constant is 1;
    attribute mti_svvh_generic_type of Sllv : constant is 1;
    attribute mti_svvh_generic_type of Srlv : constant is 1;
    attribute mti_svvh_generic_type of Srav : constant is 1;
    attribute mti_svvh_generic_type of Jr : constant is 1;
    attribute mti_svvh_generic_type of Addi : constant is 1;
    attribute mti_svvh_generic_type of Addiu : constant is 1;
    attribute mti_svvh_generic_type of Andi : constant is 1;
    attribute mti_svvh_generic_type of Ori : constant is 1;
    attribute mti_svvh_generic_type of Xori : constant is 1;
    attribute mti_svvh_generic_type of Lw : constant is 1;
    attribute mti_svvh_generic_type of Sw : constant is 1;
    attribute mti_svvh_generic_type of Beq : constant is 1;
    attribute mti_svvh_generic_type of Bne : constant is 1;
    attribute mti_svvh_generic_type of Slti : constant is 1;
    attribute mti_svvh_generic_type of Sltiu : constant is 1;
    attribute mti_svvh_generic_type of Lui : constant is 1;
    attribute mti_svvh_generic_type of J : constant is 1;
    attribute mti_svvh_generic_type of Jal : constant is 1;
end CU;
